{"version":3,"sources":["ArtistList.jsx","ArtistDetail.jsx","App.js","serviceWorker.js","index.js"],"names":["ArtistList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","artistMap","bind","assertThisInitialized","placeholder","artistList","console","log","map","artist","firstName","react_default","a","createElement","Nav","Item","key","artistID","className","Link","eventKey","src","imageURL","alt","concat","lastName","style","margin","disabled","_this$props","isLoading","listError","handleListClick","showList","shouldMap","length","variant","onSelect","Component","ArtistDetail","infoHtml","react","art","dateOfBirth","dateGiven","parsedDate","moment","diff","ageFromBirthDate","placeOfBirth","showPlaceholder","loading","activeID","TabContent","TabPane","activeArtistData","handleFetchErrors","response","ok","Error","statusText","App","state","artistsList","detailData","loadingList","loadingDetail","detailError","fetchArtistListData","_this2","fetch","then","json","responseJson","setState","catch","error","_this3","_this$state","initialDetailView","TabContainer","id","defaultActiveKey","Row","src_ArtistList","defineProperty","src_ArtistDetail","initial","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a6ca5ac6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Nav } from 'react-bootstrap'\n\n// usage: <ArtistList artists={this.state.artistsList} loading={this.state.loadingList} activeID={this.state.activeID} error={this.state.listError} className='col-sm-4'/>\n// props: {artistList: an array of objects, isLoading: boolean, activeID: string, listError: boolean\n\n// Data response from /artists - {\"artistID\":\"827jshsg6736y34788478dh\",\"firstName\":\"Quentin\",\"lastName\":\"Tarantino\",\"imageURL\":\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Quentin_Tarantino_by_Gage_Skidmore.jpg/896px-Quentin_Tarantino_by_Gage_Skidmore.jpg\",\"art\":\"direction\"}\n\nclass ArtistList extends Component {\n  constructor(props){\n    super(props)\n    this.artistMap = this.artistMap.bind(this);\n    this.placeholder = this.placeholder.bind(this);\n  }\n  artistMap(artistList) {\n    if (typeof artistList !== 'undefined') {\n      console.log(artistList)\n      const navs = artistList.map(artist => {\n        console.log('mapping artists ' + artist.firstName);\n        return(<Nav.Item key={artist.artistID} className ='artist-item'><Nav.Link className='artist-link' eventKey={artist.artistID}><img className='sidebar-image' src={artist.imageURL} alt={`${artist.firstName} ${artist.lastName}`}/> <span style={{margin: '0 auto'}}> {`${artist.firstName} ${artist.lastName}`} </span></Nav.Link></Nav.Item>)\n      })\n      return navs\n    } else {\n      console.log('artist list is undefined')\n    }\n  }\n  placeholder() {\n    return(<Nav.Item className='artist-item'> <Nav.Link className='artist-link' disabled eventKey='1'> {\"Loading\"}</Nav.Link> </Nav.Item>)\n  }\n  render() {\n    let {isLoading, listError, artistList, handleListClick} = this.props;\n    // display placeholder while loading and in case of API error\n    let showList = !isLoading && !listError;\n    console.log('show list is ' + showList)\n    let shouldMap = showList && (typeof artistList !== 'undefined') && (artistList.length !== 0);\n    return (\n      <Nav variant='pills' className='flex-column list-container' onSelect={key => handleListClick(key)}>\n      {(showList && shouldMap) ? this.artistMap(artistList) : this.placeholder()}\n      </Nav>)\n  }\n};\n\nexport default ArtistList;\n","import React, { Component, Fragment } from 'react';\nimport  { TabContent, TabPane } from 'react-bootstrap';\nimport moment from 'moment'\n\n// usage: <ArtistDetail activeID={activeID} activeArtistData={activeArtistData} initial={initialDetailView} loading={this.state.loadingDetail} className='col-sm-8'/>\n// props: {activeArtist: string UUID, activeArtistData: Json object, initial: boolean, loading: boolean}\n\nfunction ageFromBirthDate(dateGiven) {\n\tconst parsedDate = moment(dateGiven, \"DD-MMM-YYYY\")\n    const ageInYears = moment().diff(parsedDate, 'years')\n    return ageInYears;\n}\n\nclass ArtistDetail extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.infoHtml = this.infoHtml.bind(this);\n\t}\n\tplaceholder () {\n\t\treturn (<Fragment><h3> 'Welcome to the Hollywood Artist Directory' </h3>\n\t\t\t<p> Please click the name of an individual from the list on this page to see more detailed information </p></Fragment>);\n\t}\n\tinfoHtml(artist){\n\t\treturn (<Fragment><h3> {`${artist.firstName} ${artist.lastName}`}</h3>\n\t\t\t<img className='detail-image' alt={`${artist.firstName} ${artist.lastName}`} src={artist.imageURL} />\n\t\t\t<p className = 'capitalize'> {artist.art}</p>\n\t\t\t<p> {` Born on ${artist.dateOfBirth} currently ${ageFromBirthDate(artist.dateOfBirth)} years old `}</p>\n\t\t\t<p> {`Born in ${artist.placeOfBirth}`}</p></Fragment>)\n\t}\n\trender() {\n\t\tlet showPlaceholder = this.props.loading || (this.props.activeID === '1')\n\t\treturn (<TabContent className='detail-parent'>\n\t        <TabPane eventKey={this.props.activeID}>\n\t          {showPlaceholder ? this.placeholder() : this.infoHtml(this.props.activeArtistData)}\n\t        </TabPane>\n\t      </TabContent>)\n\t}\n}\n\nexport default ArtistDetail;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { TabContainer, Row } from 'react-bootstrap';\nimport ArtistList from './ArtistList.jsx';\nimport ArtistDetail from './ArtistDetail.jsx';\n\n// The effective logic for this mini-app: \n// 1. Load full list on initial mount. \n// 2. Display placeholder in detail view until user selects an artist\n// 3. On list click fetch detailed info and display in ArtistDetail Component when loaded successfully.\n// 4. If API error in full list (at /artists) display placeholder text and ask user to refresh page\n// 5. If API error in detailed view (at /artist/:id) change placeholder text, initially ask for refresh if enough time add reload button\n\nfunction handleFetchErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText)\n  }\n  return response\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      artistsList: [],\n      detailData: {},\n      activeID: '1',\n      loadingList: true,\n      loadingDetail: false,\n      listError: false,\n      detailError: false,\n    }\n    this.handleListClick = this.handleListClick.bind(this);\n    this.fetchArtistListData = this.fetchArtistListData.bind(this);\n  }\n  componentWillMount(){\n    this.fetchArtistListData()\n  }\n  fetchArtistListData() {\n    fetch('https://fb-assessment.glitch.me/artists')\n      .then(response => handleFetchErrors(response))\n      .then(response => response.json())\n      .then(responseJson => this.setState({artistsList: responseJson, loadingList: false, listError: false }))\n      .catch(error => this.setState({listError: true}))\n  }\n  handleListClick(artistID) {\n    this.setState({ loadingDetail: true }, () => {\n      fetch(`https://fb-assessment.glitch.me/artists/${artistID}`)\n      .then(response => handleFetchErrors(response))\n      .then(response => response.json())\n      .then(responseJson => this.setState({activeID: artistID, detailData: responseJson, loadingDetail: false}))\n      .catch(error => this.setState({detailError: true}))\n    })\n  }\n  render() {\n    let { activeID, detailData } = this.state \n    let initialDetailView = activeID === '1' //all others are UUID-ish\n    return (<TabContainer id='list-group-tabs' defaultActiveKey='first'>\n        <Row> \n          <ArtistList className='list-container' handleListClick={this.handleListClick} artistList={this.state.artistsList} loading={this.state.loadingList} activeID={this.state.activeID} error={this.state.listError} className='col-sm-4'/>\n          <ArtistDetail className='detail-container' activeID={activeID} activeArtistData={detailData} initial={initialDetailView} loading={this.state.loadingDetail} className='col-sm-8'/>\n        </Row>\n      </TabContainer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}